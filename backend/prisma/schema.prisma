// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserType {
  ADMIN
  STUDENT
}

enum classRoomContentType {
  PDF
  WORD
  VIDEO
  AUDIO
}

// Student and Admin model
// a student can be in many classrooms
model User {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  username          String      @unique
  firstname         String?
  secondname        String?
  classroomId       String[]    @db.ObjectId
  studentclass      ClassRoom[] @relation(fields: [classroomId], references: [id])
  age               Int?
  email             String      @unique
  attempt           Attempt[]
  usertype          UserType    @default(STUDENT)
  clerkId           String      @unique
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

// Teacher model
model Teacher {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  email             String      @unique
  username          String      @unique
  firstname         String?
  secondname        String?
  clerkId           String      @unique
  teachchingsubject String
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  classRoom         ClassRoom[]
}

// ClassRoom model
// many students can be in a classroom
model ClassRoom {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  studentIds String[]   @db.ObjectId
  students   User[]     @relation(fields: [studentIds], references: [id])
  teacherId  String     @db.ObjectId
  teacher    Teacher    @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  topics     Topic[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

// TopicContent model (PDF, WORD, VIDEO, AUDIO)
// This model refers to the content of a topic
model TopicContent {
  id          String               @id @default(auto()) @map("_id") @db.ObjectId
  topicId     String               @db.ObjectId
  contenttpye classRoomContentType @default(PDF)
  content     String
  topic       Topic                @relation(fields: [topicId], references: [id], onDelete: Cascade)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

// Topic model
// This model refers to the subject of a class
model Topic {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  classRoomId  String         @db.ObjectId
  classRoom    ClassRoom      @relation(fields: [classRoomId], references: [id], onDelete: Cascade)
  topicContent TopicContent[]
  quizzes      Quiz[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

// Quiz model
// This model refers to the quiz of a topic
model Quiz {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  topicId   String     @db.ObjectId
  topic     Topic      @relation(fields: [topicId], references: [id], onDelete: Cascade)
  questions Question[]
  attempts  Attempt[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

// Question model
// This model refers to the question of a quiz
model Question {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  question  String
  options   String[]
  answer    String
  quizId    String   @db.ObjectId
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Attempt   Attempt? @relation(fields: [attemptId], references: [id])
  attemptId String?  @db.ObjectId
}

// Attempt model
// This model refers to the attempt of a student on a quiz
model Attempt {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  score     Int
  quizId    String     @db.ObjectId
  quiz      Quiz       @relation(fields: [quizId], references: [id], onDelete: Cascade)
  question  Question[]
  answers   String[]
  studentId String     @db.ObjectId
  student   User       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}
