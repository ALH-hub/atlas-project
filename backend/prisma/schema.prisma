// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")

}

enum UserType{
  ADMIN
  STUDENT
}

enum classRoomContentType{
  PDF
  WORD
  VIDEO
  AUDIO
}





model User{
  id       String  @id @map("_id") @default(auto()) @db.ObjectId
  username String @unique
  firstname String?
  secondname String?
  class String?
  age Int?
  email   String @unique
  usertype UserType @default(STUDENT)
  clerkId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Teacher {
  id       String  @id @map("_id") @default(auto()) @db.ObjectId
  name String
  email   String @unique
  username String @unique
  firstname String?
  secondname String?
  clerkId String @unique
  teachchingsubject String
  teachermatriculationId String @unique // this will be used in future to validate teachers
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  classRoom ClassRoom[]
}


model ClassRoom{
  id       String  @id @map("_id") @default(auto()) @db.ObjectId
  name String
  teacherId String @db.ObjectId
  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
topics Topic[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  classRoomContent classRoomContent[]
}


model classRoomContent{
  id       String  @id @map("_id") @default(auto()) @db.ObjectId
  classRoomId String @db.ObjectId
  classRoom ClassRoom @relation(fields: [classRoomId], references: [id], onDelete: Cascade)
  contenttpye classRoomContentType @default(PDF)
  content String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Topic {
  id       String  @id @map("_id") @default(auto()) @db.ObjectId
  name String
  classRoomId String @db.ObjectId
  classRoom ClassRoom @relation(fields: [classRoomId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
